//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using InventoryManagment.Models.Entities;
using Microsoft.EntityFrameworkCore;


namespace InventoryManagment.Models
{
    using System;
    using System.Linq;

    public partial class InventoryManagmentEntities : DbContext
    {
        public InventoryManagmentEntities()
        {
            // Database.EnsureDeleted();
            if (Database.EnsureCreated())
            {
                string filePath = Path.Combine(FileSystem.AppDataDirectory, "InventoryManagmentDBDate.sql");
                if (!File.Exists(filePath))
                {
                    System.Console.WriteLine($"SQL файл не найден: {filePath}");
                }
                else
                {
                    string sqlScript = File.ReadAllText(filePath);

                    Database.ExecuteSqlRawAsync(sqlScript);
                }


                SaveChanges();
            }

        }
        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            UpdateOrderTotalCosts();
            return await base.SaveChangesAsync(cancellationToken);
        }

        public int SaveChangesWithUpdateOrderTotalCosts()
        {
            UpdateOrderTotalCosts();
            return base.SaveChanges();
        }

        public void UpdateOrderTotalCosts()
        {
            // Получить все измененные записи OrderDetail
            var updatedOrderIds = ChangeTracker.Entries<OrderDetail>()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified || e.State == EntityState.Deleted)
                .Select(e => e.Entity.OrderID)
                .Distinct()
                .ToList();

            // Получить все измененные записи Equipment
            var updatedEquipmentIds = ChangeTracker.Entries<Equipment>()
                .Where(e => e.State == EntityState.Modified)
                .Select(e => e.Entity.EquipmentID)
                .Distinct()
                .ToList();

            if (updatedEquipmentIds.Any())
            {
                // Добавить затронутые заказы из OrderDetails, связанных с изменённым Equipment
                var affectedOrderIds = OrderDetails
                    .Where(od => updatedEquipmentIds.Contains(od.EquipmentID))
                    .Select(od => od.OrderID)
                    .Distinct()
                    .ToList();

                updatedOrderIds.AddRange(affectedOrderIds);
            }

            // Удалить дубликаты ID заказов
            updatedOrderIds = updatedOrderIds.Distinct().ToList();

            // Пересчитать TotalCost для затронутых заказов
            foreach (var orderId in updatedOrderIds)
            {
                var order = Orders.Include(o => o.OrderDetails)
                    .ThenInclude(od => od.Equipment)
                    .FirstOrDefault(o => o.OrderID == orderId);

                if (order != null)
                {
                    order.TotalCost = (decimal)order.OrderDetails.Sum(od => od.Quantity * od.Equipment.Cost);
                }
            }
        }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder
                .UseSqlite("Data Source=InventoryManagmentDB.db");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Equipment -> Stock (One-to-Many)
            modelBuilder.Entity<Stock>()
                .HasOne(s => s.Equipment)
                .WithMany(e => e.Stocks)
                .HasForeignKey(s => s.EquipmentID)
                .OnDelete(DeleteBehavior.Cascade);

            // Связь между Equipment и Supplier
            modelBuilder.Entity<Equipment>()
                .HasOne(e => e.Supplier)
                .WithMany(s => s.Equipments)
                .HasForeignKey(e => e.SupplierID)
                .OnDelete(DeleteBehavior.Restrict); // Настройка поведения удаления

            // Связь многие ко многим между User и Role
            modelBuilder.Entity<UserRole>()
                .HasKey(ur => new { ur.UserID, ur.RoleID });

            modelBuilder.Entity<UserRole>()
                .HasOne(ur => ur.User)
                .WithMany(u => u.UserRoles)
                .HasForeignKey(ur => ur.UserID);

            modelBuilder.Entity<UserRole>()
      .HasKey(ur => ur.UserRoleID);

            modelBuilder.Entity<UserRole>()
                .Property(ur => ur.UserRoleID)
                .ValueGeneratedOnAdd(); // Указывает, что поле автоинкрементируемое


            modelBuilder.Entity<UserRole>()
                .HasOne(ur => ur.Role)
                .WithMany(r => r.UserRoles)
                .HasForeignKey(ur => ur.RoleID);

            // Связь User и Department
            modelBuilder.Entity<User>()
                .HasOne(u => u.Department)
                .WithMany(d => d.Users)
                .HasForeignKey(u => u.DepartmentID);

            // Связь между EquipmentMovement и Equipment, Warehouse, User
            modelBuilder.Entity<EquipmentMovement>()
                .HasOne(em => em.Equipment)
                .WithMany(e => e.EquipmentMovements)
                .HasForeignKey(em => em.EquipmentID);

            modelBuilder.Entity<EquipmentMovement>()
                .HasOne(em => em.SourceWarehouse)
                .WithMany(w => w.SourceWarehouseMovements)
                .HasForeignKey(em => em.SourceWarehouseID);

            modelBuilder.Entity<EquipmentMovement>()
                .HasOne(em => em.DestinationWarehouse)
                .WithMany(w => w.DestinationWarehouseMovements)
                .HasForeignKey(em => em.DestinationWarehouseID);

            modelBuilder.Entity<EquipmentMovement>()
                .HasOne(em => em.User)
                .WithMany(u => u.EquipmentMovements)
                .HasForeignKey(em => em.UserID);

            // Связь между UtilizationRecord и Equipment, User
            modelBuilder.Entity<UtilizationRecord>()
                .HasOne(ur => ur.Equipment)
                .WithMany(e => e.UtilizationRecords)
                .HasForeignKey(ur => ur.EquipmentID);

            modelBuilder.Entity<UtilizationRecord>()
                .HasOne(ur => ur.User)
                .WithMany(u => u.UtilizationRecords)
                .HasForeignKey(ur => ur.UserID);
        }

        public DbSet<Category> Category { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Equipment> Equipments { get; set; }
        public DbSet<EquipmentMovement> EquipmentMovements { get; set; }  // Добавлена таблица для движения оборудования
        public DbSet<Maintenance> Maintenances { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Status> Statuses { get; set; }
        public DbSet<Stock> Stocks { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<UtilizationRecord> UtilizationRecords { get; set; }
        public DbSet<Warehouse> Warehouses { get; set; }
        public DbSet<WarrantyClaim> WarrantyClaims { get; set; }

    }
}
